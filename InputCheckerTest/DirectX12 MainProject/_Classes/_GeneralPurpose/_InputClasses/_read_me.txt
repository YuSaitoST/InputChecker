
  **********************************************
  *					       *
  *  このファイルを外に出そう、容量は削らねば  *
  *  					       *
  **********************************************


--------------------------------------------------------------------
[使い方]

<下準備>
1. ソリューションエクスプローラーに入れるフォルダを作成する。
2. そのフォルダにドラッグ&ドロップする。

<使用>
1.使いたいシーンクラスのヘッダーに、
	InputClasses/UseKeyCheck.h をインクルード。
	＊この時点で勝手に初期化されます。
2.使いたいシーンのUpdate()の最初の方に、Press.Accepts(); を記述。
	-> 入力状態を調べる関数であるため
3.UseKeyCheck.hの記述を例にUseKeyCheckの.h.cppに入力方法を記述する
	-> キーボードとゲームパッド両方に対応する記述が理想
	＊UseKeyCheckクラスは、入力判定クラスを間接的に扱うクラスです。
	  実装を分けることで、操作するクラス内の変更をしないで済むので作成。
4.入力を受け付けたいところに専用の記述をする。([入力判定方法]参照)

--------------------------------------------------------------------
--------------------------------------------------------------------
[入力判定方法]

＊UseKeyCheckクラスの関数を通して呼び出す。

・「Press.」から、取得したい入力や値を選べる。
・単発入力なら、Event～とつく関数を使う。
・長押し入力なら、State～とつく関数を使う。
・何かしらのボタン入力なら、AnyKey() を使う。
・入力方向のベクトルなら、Direction～とつく関数を使う。
	-> 「360」とつくものは、360度の方向を取る関数。
	    ついていないものは、4方向を取る関数。

--------------------------------------------------------------------
--------------------------------------------------------------------
[引数について]

・〇〇CharaKey()には、入力を受け付けたい文字を渡す(大文字で)
	ex) (A単発入力なら...) Input.EventCharaKey('A')
・〇〇ArrowKey()には、入力を受け付けたい方向を渡す
	ex) (右単発入力なら...) Input.EventArrowKey(RIGHT)

--------------------------------------------------------------------
--------------------------------------------------------------------
[対応しているキー]

<実装済み>
・(KeyBoad)A～Zの文字
・(KeyBoad)4方向キー
・(GamePad)入力判定(-1～1の入力判定)

<未実装>
// 制作中です
・(GamePad)「InputAnyKey」
・(GamePad)入力判定(trueかfalse、主要キーのみ)

// 希望あれば作ります
・Space
・Enter
・ESC
・数字(名前入力くらいにしか需要ない気もするが...)
・各種記号(需要ない気もするが...)
・ゲームパッド（スタートキーとか、メインで使わないやつ）
・その他

--------------------------------------------------------------------







