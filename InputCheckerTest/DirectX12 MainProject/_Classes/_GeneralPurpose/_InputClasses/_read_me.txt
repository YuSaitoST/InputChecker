
  **********************************************
  *					       *
  *  このファイルを外に出そう、容量は削らねば  *
  *  					       *
  **********************************************


--------------------------------------------------------------------
[使い方]

<下準備>
1. ソリューションエクスプローラーに入れるフォルダを作成する。
2. そのフォルダにドラッグ&ドロップする。

<使用>
1.使いたいシーンと入力判定をしたいクラスのヘッダーに、
	InputClasses/UseKeyCheck.h をインクルード。
	＊この時点で勝手に初期化されます。
2.使いたいシーンのUpdate()の最初の方に、Press.Accepts(); を記述。
	-> 入力状態を調べる関数であるため
3.入力を受け付けたいところに専用の記述をする。([入力判定方法]参照)

--------------------------------------------------------------------
--------------------------------------------------------------------
[入力判定方法]

・単発入力なら、Input.Event～() を使う。
・長押し入力なら、Input.State～() を使う。
・何かしらのボタン入力なら、Input.AnyKey() を使う。
・入力方向のベクトルなら、Input.〇〇Direction() を使う。
	-> 〇〇は「Event」or「State」

--------------------------------------------------------------------
--------------------------------------------------------------------
[引数について]

・〇〇CharaKey()には、入力を受け付けたい文字を渡す(大文字で)
	ex) (A単発入力なら...) Input.EventCharaKey('A')
・〇〇ArrowKey()には、入力を受け付けたい方向を渡す
	ex) (右単発入力なら...) Input.EventArrowKey(RIGHT)

--------------------------------------------------------------------
--------------------------------------------------------------------
[対応しているキー]

<実装済み>
・A～Zの文字
・4方向キー

<未実装>
// 制作中です
・ゲームパッド（主要キー）

// 希望あれば作ります
・Space
・Enter
・ESC
・数字(名前入力くらいにしか需要ない気もするが...)
・各種記号(需要ない気もするが...)
・ゲームパッド（スタートキーとか、メインで使わないやつ）
・その他

--------------------------------------------------------------------
--------------------------------------------------------------------
[開発メモ]

・使う時はキーボードとゲームパッドをまとめて扱いたい
	-> ex) bool JumpKey() {
		   return Key.EventCharaKey('B') || 
			  Pad.EventCharaKey(PADKEY::Y);
	       }
	-> 要は、この「入力管理クラス」を間接的に利用でき、
		その間接クラス内で好きなキーに割り当てることができるようにしたい


<設計>

ひとまず、間接クラスを作る
	-> 後からいじれることをメモしておく

InputCheckクラスはシングルトンにしなくて良さそう

--------------------------------------------------------------------
/*
	入力判定クラスを間接的に扱うクラス
		-> 実装を分けることで、操作するクラス内の変更をしないで済むので作成
*/





